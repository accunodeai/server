# ECS/Fargate Infrastructure Setup
# Zero-downtime, auto-scaling container deployment

AWSTemplateFormatVersion: '2010-09-09'
Description: 'AccuNode ECS/Fargate Infrastructure with Auto Scaling'

Parameters:
  VPCId:
    Type: AWS::EC2::VPC::Id
    Default: vpc-0a1b2c3d4e5f6g7h8  # Replace with your VPC ID
  
  SubnetIds:
    Type: List<AWS::EC2::Subnet::Id>
    Default: subnet-12345,subnet-67890  # Replace with your subnet IDs
  
  ECRRepository:
    Type: String
    Default: 461962182774.dkr.ecr.us-east-1.amazonaws.com/accunode:latest

Resources:
  # ECS Cluster
  AccuNodeCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: AccuNode-Cluster
      CapacityProviders:
        - FARGATE
        - FARGATE_SPOT  # 70% cost savings for non-critical workloads
      DefaultCapacityProviderStrategy:
        - CapacityProvider: FARGATE
          Weight: 1
        - CapacityProvider: FARGATE_SPOT
          Weight: 1

  # Task Execution Role
  TaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
      Policies:
        - PolicyName: ECRAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ecr:GetAuthorizationToken
                  - ecr:BatchCheckLayerAvailability
                  - ecr:GetDownloadUrlForLayer
                  - ecr:BatchGetImage
                Resource: '*'

  # API Task Definition
  APITaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: accunode-api
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      Cpu: 512  # 0.5 vCPU
      Memory: 1024  # 1GB RAM
      ExecutionRoleArn: !Ref TaskExecutionRole
      ContainerDefinitions:
        - Name: accunode-api
          Image: !Ref ECRRepository
          PortMappings:
            - ContainerPort: 8000
              Protocol: tcp
          Environment:
            - Name: ENVIRONMENT
              Value: production
            - Name: DATABASE_URL
              Value: !Sub "postgresql://accunode_user:${DatabasePassword}@accunode-db.cluster-abc123.us-east-1.rds.amazonaws.com:5432/accunode_db"
            - Name: REDIS_URL
              Value: redis://accunode-redis.d9avr2.0001.use1.cache.amazonaws.com:6379
          HealthCheck:
            Command:
              - CMD-SHELL
              - "curl -f http://localhost:8000/health || exit 1"
            Interval: 30
            Timeout: 5
            Retries: 3
            StartPeriod: 60
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref APILogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: api

  # Worker Task Definition
  WorkerTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: accunode-worker
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      Cpu: 1024  # 1 vCPU
      Memory: 2048  # 2GB RAM  
      ExecutionRoleArn: !Ref TaskExecutionRole
      ContainerDefinitions:
        - Name: accunode-worker
          Image: !Ref ECRRepository
          Command:
            - celery
            - -A
            - app.workers.celery_app
            - worker
            - --loglevel=info
            - --concurrency=2
            - --queues=medium_priority
          Environment:
            - Name: ENVIRONMENT
              Value: production
            - Name: DATABASE_URL
              Value: !Sub "postgresql://accunode_user:${DatabasePassword}@accunode-db.cluster-abc123.us-east-1.rds.amazonaws.com:5432/accunode_db"
            - Name: REDIS_URL
              Value: redis://accunode-redis.d9avr2.0001.use1.cache.amazonaws.com:6379
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref WorkerLogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: worker

  # API ECS Service
  APIService:
    Type: AWS::ECS::Service
    Properties:
      ServiceName: accunode-api-service
      Cluster: !Ref AccuNodeCluster
      TaskDefinition: !Ref APITaskDefinition
      DesiredCount: 1
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          SecurityGroups:
            - !Ref ECSSecurityGroup
          Subnets: !Ref SubnetIds
          AssignPublicIp: ENABLED
      LoadBalancers:
        - ContainerName: accunode-api
          ContainerPort: 8000
          TargetGroupArn: !Ref APITargetGroup
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 50
        DeploymentCircuitBreaker:
          Enable: true
          Rollback: true
      HealthCheckGracePeriodSeconds: 60

  # Worker ECS Service
  WorkerService:
    Type: AWS::ECS::Service
    Properties:
      ServiceName: accunode-worker-service
      Cluster: !Ref AccuNodeCluster
      TaskDefinition: !Ref WorkerTaskDefinition
      DesiredCount: 1
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          SecurityGroups:
            - !Ref ECSSecurityGroup
          Subnets: !Ref SubnetIds
          AssignPublicIp: ENABLED

  # Auto Scaling for API
  APIAutoScalingTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties:
      MaxCapacity: 2
      MinCapacity: 1
      ResourceId: !Sub service/${AccuNodeCluster}/${APIService}
      RoleARN: !Sub arn:aws:iam::${AWS::AccountId}:role/aws-service-role/ecs.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_ECSService
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs

  APIScalingPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: APITargetTrackingScalingPolicy
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref APIAutoScalingTarget
      TargetTrackingScalingPolicyConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: ECSServiceAverageCPUUtilization
        TargetValue: 70.0
        ScaleOutCooldown: 300
        ScaleInCooldown: 300

  # Auto Scaling for Workers
  WorkerAutoScalingTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties:
      MaxCapacity: 4
      MinCapacity: 1
      ResourceId: !Sub service/${AccuNodeCluster}/${WorkerService}
      RoleARN: !Sub arn:aws:iam::${AWS::AccountId}:role/aws-service-role/ecs.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_ECSService
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs

  WorkerScalingPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: WorkerTargetTrackingScalingPolicy
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref WorkerAutoScalingTarget
      TargetTrackingScalingPolicyConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: ECSServiceAverageCPUUtilization
        TargetValue: 80.0
        ScaleOutCooldown: 300
        ScaleInCooldown: 600  # Longer cooldown for workers

  # CloudWatch Log Groups
  APILogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: /ecs/accunode-api
      RetentionInDays: 7

  WorkerLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: /ecs/accunode-worker
      RetentionInDays: 7

  # Security Group for ECS tasks
  ECSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for AccuNode ECS tasks
      VpcId: !Ref VPCId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 8000
          ToPort: 8000
          SourceSecurityGroupId: !Ref ALBSecurityGroup
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0

  # Application Load Balancer (reuse existing or create new)
  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: AccuNode-ALB-ECS
      Scheme: internet-facing
      SecurityGroups:
        - !Ref ALBSecurityGroup
      Subnets: !Ref SubnetIds
      Type: application

  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for AccuNode ALB
      VpcId: !Ref VPCId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0

  APITargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: AccuNode-API-TG-ECS
      Port: 8000
      Protocol: HTTP
      VpcId: !Ref VPCId
      TargetType: ip
      HealthCheckPath: /health
      HealthCheckProtocol: HTTP
      HealthCheckIntervalSeconds: 30
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 3

  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref APITargetGroup
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 80
      Protocol: HTTP

Outputs:
  ClusterName:
    Description: Name of the ECS cluster
    Value: !Ref AccuNodeCluster
    
  LoadBalancerDNS:
    Description: DNS name of the load balancer
    Value: !GetAtt ApplicationLoadBalancer.DNSName
    
  APIServiceName:
    Description: Name of the API ECS service
    Value: !Ref APIService
    
  WorkerServiceName:
    Description: Name of the Worker ECS service  
    Value: !Ref WorkerService
